datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
  }

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
      id            String    @id @default(cuid())
      name          String?
      email         String    @unique
      password      String
      emailVerified DateTime?
      image         String?
      roleId        String
      language      String    @default("Russian")
      currency      String    @default("RUB")
      country       String    @default("russia")
      isActive      Boolean   @default(true)
      role          Role      @relation(fields: [roleId], references: [id])
      accounts      Account[]
      sessions      Session[]
      createdAt     DateTime  @default(now())
      updatedAt     DateTime  @updatedAt
    }

 model Role {
   id          String   @id @default(cuid())
   name        String   @unique
   description String?
   permissions String?  @default("{}")  // JSON: {"module": ["action1", "action2"]}
   users       User[]
   createdAt   DateTime @default(now())
   updatedAt   DateTime @updatedAt
 }

model VerificationToken {
   identifier String
   token      String   @unique
   expires    DateTime

   @@unique([identifier, token])
}

model Language {
   id          String   @id @default(cuid())
   name        String   @unique
   code        String   @unique
   isActive    Boolean  @default(true)
   createdAt   DateTime @default(now())
   updatedAt   DateTime @updatedAt
}

model Country {
      id          String   @id @default(cuid())
      name        String   @unique
      code        String   @unique
      isActive    Boolean  @default(true)
      states      State[]
      createdAt   DateTime @default(now())
      updatedAt   DateTime @updatedAt
  }


model Currency {
   id          String   @id @default(cuid())
   name        String   @unique
   code        String   @unique
   symbol      String
   isActive    Boolean  @default(true)
   createdAt   DateTime @default(now())
   updatedAt   DateTime @updatedAt
}

model State {
       id          String   @id @default(cuid())
       name        String
       code        String
       countryId   String?
       country     Country? @relation(fields: [countryId], references: [id], onDelete: Cascade)
       isActive    Boolean  @default(true)
       createdAt   DateTime @default(now())
       updatedAt   DateTime @updatedAt

       cities      City[]

       @@unique([name, id])
   }

model City {
        id          String   @id @default(cuid())
        name        String
        code        String
        stateId     String?
        state       State?   @relation(fields: [stateId], references: [id], onDelete: Cascade)
        isActive    Boolean  @default(true)
        createdAt   DateTime @default(now())
        updatedAt   DateTime @updatedAt

        districts   District[]

        @@unique([name, id])
    }

model District {
    id          String   @id @default(cuid())
    name        String
    code        String
    cityId      String?
    city        City?    @relation(fields: [cityId], references: [id], onDelete: Cascade)
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@unique([name, id])
}

model Translation {
     id          String   @id @default(cuid())
     key         String   // e.g., "navigation.dashboards"
     language    String   // e.g., "en", "fr", "ar"
     value       String   // The translated text
     namespace   String   @default("common") // e.g., "navigation", "common", "forms"
     isActive    Boolean  @default(true)
     createdAt   DateTime @default(now())
     updatedAt   DateTime @updatedAt

     @@unique([key, language, namespace])
   }

model EmailTemplate {
     id          String   @id @default(cuid())
     name        String   @unique
     subject     String
     content     String
     isActive    Boolean  @default(true)
     createdAt   DateTime @default(now())
     updatedAt   DateTime @updatedAt
   }
