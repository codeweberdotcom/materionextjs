import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/libs/auth'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

export async function GET(request: NextRequest) {
  try {
    console.log('üîç [API] –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π')

    const session = await getServerSession(authOptions)
    console.log('üë§ [API] –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', session?.user?.id)

    if (!session?.user?.id) {
      console.log('‚ùå [API] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get user's chat rooms
    console.log('üè† [API] –ü–æ–∏—Å–∫ —á–∞—Ç-–∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    const userRooms = await (prisma as any).chatRoom.findMany({
      where: {
        OR: [
          { user1Id: session.user.id },
          { user2Id: session.user.id }
        ]
      }
    })
    console.log('üìã [API] –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–Ω–∞—Ç:', userRooms.length)

    if (userRooms.length === 0) {
      console.log('üì≠ [API] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —á–∞—Ç-–∫–æ–º–Ω–∞—Ç')
      return NextResponse.json([])
    }

    // Get the last message from each chat room
    console.log('üí¨ [API] –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö')
    const lastMessages = []

    for (const room of userRooms) {
      console.log('üîé [API] –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–º–Ω–∞—Ç–µ:', room.id)
      const message = await (prisma as any).message.findFirst({
        where: { roomId: room.id },
        include: { sender: true },
        orderBy: { createdAt: 'desc' }
      })

      if (message) {
        console.log('üìù [API] –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.content.substring(0, 50) + '...')
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è: –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–º–Ω–∞—Ç–µ
        const receiverId = room.user1Id === message.senderId ? room.user2Id : room.user1Id

        console.log('üîÑ [API] –ö–æ–º–Ω–∞—Ç–∞:', { user1Id: room.user1Id, user2Id: room.user2Id })
        console.log('üë§ [API] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:', message.senderId, '–ü–æ–ª—É—á–∞—Ç–µ–ª—å:', receiverId)

        lastMessages.push({
          id: message.id,
          content: message.content,
          senderId: message.senderId,
          receiverId: receiverId,
          roomId: message.roomId,
          createdAt: message.createdAt
        })
      } else {
        console.log('üì≠ [API] –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç')
      }
    }

    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–æ–º–Ω–∞—Ç —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    if (lastMessages.length === 0) {
      console.log('üì≠ [API] –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

      for (const room of userRooms) {
        const otherUserId = room.user1Id === session.user.id ? room.user2Id : room.user1Id

        lastMessages.push({
          id: `empty-${room.id}`,
          content: '',
          senderId: otherUserId, // –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          receiverId: session.user.id, // –ü–æ–ª—É—á–∞—Ç–µ–ª—å - —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          roomId: room.id,
          createdAt: room.createdAt.toISOString()
        })

        console.log('üìù [API] –°–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', {
          roomId: room.id,
          otherUserId: otherUserId,
          currentUserId: session.user.id
        })
      }
    }

    console.log('‚úÖ [API] –í–æ–∑–≤—Ä–∞—â–∞–µ–º', lastMessages.length, '–ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π')
    return NextResponse.json(lastMessages)
  } catch (error) {
    console.error('‚ùå [API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}