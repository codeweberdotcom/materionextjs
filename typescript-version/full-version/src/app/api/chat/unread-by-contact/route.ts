import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/libs/auth'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

export async function GET(request: NextRequest) {
  try {
    console.log('üîç [API] –ó–∞–ø—Ä–æ—Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º')

    const session = await getServerSession(authOptions)
    console.log('üë§ [API] –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', session?.user?.id)

    if (!session?.user?.id) {
      console.log('‚ùå [API] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get user's chat rooms
    console.log('üè† [API] –ü–æ–∏—Å–∫ —á–∞—Ç-–∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    const userRooms = await (prisma as any).chatRoom.findMany({
      where: {
        OR: [
          { user1Id: session.user.id },
          { user2Id: session.user.id }
        ]
      }
    })
    console.log('üìã [API] –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–Ω–∞—Ç:', userRooms.length)

    const unreadByContact: { [contactId: string]: number } = {}

    // For each room, count unread messages from the other user
    for (const room of userRooms) {
      const otherUserId = room.user1Id === session.user.id ? room.user2Id : room.user1Id

      console.log('üîé [API] –ü–æ–¥—Å—á–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–º–Ω–∞—Ç–µ:', room.id, '–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', otherUserId)

      const unreadCount = await (prisma as any).message.count({
        where: {
          roomId: room.id,
          senderId: otherUserId, // Messages from the other user
          readAt: null // Not read yet
        }
      })

      if (unreadCount > 0) {
        unreadByContact[otherUserId] = unreadCount
        console.log('üìù [API] –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç', otherUserId, ':', unreadCount)
      }
    }

    console.log('‚úÖ [API] –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º:', unreadByContact)
    return NextResponse.json(unreadByContact)
  } catch (error) {
    console.error('‚ùå [API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}